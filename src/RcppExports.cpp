// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

// lspsiC
List lspsiC(const mat& images, const rowvec& phases, const vec& wt);
RcppExport SEXP _zernike_lspsiC(SEXP imagesSEXP, SEXP phasesSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type images(imagesSEXP);
    Rcpp::traits::input_parameter< const rowvec& >::type phases(phasesSEXP);
    Rcpp::traits::input_parameter< const vec& >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(lspsiC(images, phases, wt));
    return rcpp_result_gen;
END_RCPP
}
// aiapsiC
List aiapsiC(const mat& images, const rowvec& phases_init, const double& ptol, const int& maxiter, const bool& trace);
RcppExport SEXP _zernike_aiapsiC(SEXP imagesSEXP, SEXP phases_initSEXP, SEXP ptolSEXP, SEXP maxiterSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type images(imagesSEXP);
    Rcpp::traits::input_parameter< const rowvec& >::type phases_init(phases_initSEXP);
    Rcpp::traits::input_parameter< const double& >::type ptol(ptolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(aiapsiC(images, phases_init, ptol, maxiter, trace));
    return rcpp_result_gen;
END_RCPP
}
// gpcapsiC
List gpcapsiC(const mat& images, const double& ptol, const int& maxiter, const bool& trace);
RcppExport SEXP _zernike_gpcapsiC(SEXP imagesSEXP, SEXP ptolSEXP, SEXP maxiterSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type images(imagesSEXP);
    Rcpp::traits::input_parameter< const double& >::type ptol(ptolSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(gpcapsiC(images, ptol, maxiter, trace));
    return rcpp_result_gen;
END_RCPP
}
// pxls
mat pxls(const mat& im, const vec& delta, const mat& tilt, const vec& df, const vec& x, const vec& y, const vec& z3);
RcppExport SEXP _zernike_pxls(SEXP imSEXP, SEXP deltaSEXP, SEXP tiltSEXP, SEXP dfSEXP, SEXP xSEXP, SEXP ySEXP, SEXP z3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type im(imSEXP);
    Rcpp::traits::input_parameter< const vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const mat& >::type tilt(tiltSEXP);
    Rcpp::traits::input_parameter< const vec& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const vec& >::type z3(z3SEXP);
    rcpp_result_gen = Rcpp::wrap(pxls(im, delta, tilt, df, x, y, z3));
    return rcpp_result_gen;
END_RCPP
}
// readraw
NumericMatrix readraw(CharacterVector fname, NumericVector channels);
RcppExport SEXP _zernike_readraw(SEXP fnameSEXP, SEXP channelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type channels(channelsSEXP);
    rcpp_result_gen = Rcpp::wrap(readraw(fname, channels));
    return rcpp_result_gen;
END_RCPP
}
// rzernike
NumericVector rzernike(NumericVector rho, int n, int m);
RcppExport SEXP _zernike_rzernike(SEXP rhoSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rzernike(rho, n, m));
    return rcpp_result_gen;
END_RCPP
}
// zpmC
NumericMatrix zpmC(NumericVector rho, NumericVector theta, int maxorder);
RcppExport SEXP _zernike_zpmC(SEXP rhoSEXP, SEXP thetaSEXP, SEXP maxorderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type maxorder(maxorderSEXP);
    rcpp_result_gen = Rcpp::wrap(zpmC(rho, theta, maxorder));
    return rcpp_result_gen;
END_RCPP
}

RcppExport void id_dxy_uw(void *, void *, void *, void *, void *, void *, void *, void *);
RcppExport void id_uw(void *, void *, void *, void *);
RcppExport void q_uw(void *, void *, void *, void *, void *);
RcppExport void read_jpg_img(void *, void *, void *, void *, void *, void *, void *);
RcppExport void read_jpg_img_info(void *, void *, void *, void *, void *);
RcppExport void read_tiff_img(void *, void *, void *, void *, void *, void *, void *);
RcppExport void read_tiff_img_info(void *, void *, void *, void *, void *);
RcppExport void resize_image(void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_zernike_lspsiC", (DL_FUNC) &_zernike_lspsiC, 3},
    {"_zernike_aiapsiC", (DL_FUNC) &_zernike_aiapsiC, 5},
    {"_zernike_gpcapsiC", (DL_FUNC) &_zernike_gpcapsiC, 4},
    {"_zernike_pxls", (DL_FUNC) &_zernike_pxls, 7},
    {"_zernike_readraw", (DL_FUNC) &_zernike_readraw, 2},
    {"_zernike_rzernike", (DL_FUNC) &_zernike_rzernike, 3},
    {"_zernike_zpmC", (DL_FUNC) &_zernike_zpmC, 3},
    {NULL, NULL, 0}
};

static const R_CMethodDef CMethods[] = {
    {"id_dxy_uw",          (DL_FUNC) &id_dxy_uw,          8},
    {"id_uw",              (DL_FUNC) &id_uw,              4},
    {"q_uw",               (DL_FUNC) &q_uw,               5},
    {"read_jpg_img",       (DL_FUNC) &read_jpg_img,       7},
    {"read_jpg_img_info",  (DL_FUNC) &read_jpg_img_info,  5},
    {"read_tiff_img",      (DL_FUNC) &read_tiff_img,      7},
    {"read_tiff_img_info", (DL_FUNC) &read_tiff_img_info, 5},
    {"resize_image",       (DL_FUNC) &resize_image,       7},
    {NULL, NULL, 0, NULL}
};


RcppExport void R_init_zernike(DllInfo *dll) {
    R_registerRoutines(dll, CMethods, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
